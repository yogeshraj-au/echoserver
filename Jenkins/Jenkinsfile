pipeline {
    agent {
        label 'aws'
    }
    
    environment {
        // Define environment variables
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_IMAGE_NAME = 'imageimpressario/echoserver'
        GIT_REPO_URL = 'https://github.com/yogeshraj-au/echoserver.git'
        KUBE_GIT_REPO_URL = 'https://github.com/yogeshraj-au/echoserver_app_kubernetes.git'
        DOCKERFILE_PATH = 'Dockerfile'
        BASE_VERSION = '1.0'
        DIRECTORY_PATH = 'environment/stage/echoserver_1/'
        GIT_REPO_NAME = 'echoserver_app_kubernetes'
        GH_TOKEN = credentials('github-cli-token')
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the Git repository
                git branch: 'main', url: env.GIT_REPO_URL
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    def version = "${env.BASE_VERSION}.${env.BUILD_NUMBER}"
                    def taggedImage = "${env.DOCKER_IMAGE_NAME}:${version}"
                    
                    docker.build(taggedImage, "--file ${env.DOCKERFILE_PATH} .")
                    
                    // Export tagged image for use in later stages
                    env.TAGGED_IMAGE = taggedImage
                    
                    // Extract tag from the Docker image name
                    env.TAG = version
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USERNAME')]) {
                    script {
                        docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                            docker.image(env.TAGGED_IMAGE).push()
                        }
                    }
                }
            }
        }

        stage('Clone Another Git Repo and Create PR') {
            steps {
                script {
                    // Set GH_TOKEN environment variable
                    env.GH_TOKEN = credentials('github-cli-token')
                    
                    // Clone another Git repository
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: env.KUBE_GIT_REPO_URL]]])
                    
                    // Construct branch name based on the tag
                    def branchName = "feature/update-to-${env.TAG}"
                    def tag = env.TAGGED_IMAGE.tokenize(':')[1]
                    
                    // Update image tag in the cloned repository
                    sh "find ${env.DIRECTORY_PATH} -type f -exec sed -i 's|${env.DOCKER_IMAGE_NAME}:[0-9.]*|${env.DOCKER_IMAGE_NAME}:${tag}|g' {} +"
                    
                    // Create a new branch
                    sh "git checkout -b ${branchName}"
                    sh "git add ."
                    sh "git commit -m 'Update Docker image tag to ${env.TAGGED_IMAGE}'"
                    
                    // Push changes with Git credentials
                    withCredentials([usernamePassword(credentialsId: 'git', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh "git push https://${env.GIT_USERNAME}:${env.GIT_PASSWORD}@github.com/yogeshraj-au/${env.GIT_REPO_NAME}.git ${branchName}"
                        // Set GH_TOKEN for use with GitHub CLI
                        sh "export GH_TOKEN=${env.GH_TOKEN}"
                        sh "gh pr create --base main --head ${branchName} --title 'Updated Docker image tag' --body 'This pull request updates the Docker image tag.'"
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "Pipeline completed successfully"
        }
        failure {
            echo "Pipeline failed"
        }
    }
}
